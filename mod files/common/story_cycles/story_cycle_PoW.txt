story_PoW = {
	on_setup = {
		# set_variable = {
		# 	name = story_army_owner
		# 	value = story_owner
		# }
		set_variable = {
			name = story_army
			value = story_owner.var:PoW_army
		}
		set_variable = {
			name = story_location
			value = story_owner.var:PoW_army.location
		}
		debug_log = "dbg_log Story created"
		story_owner = { debug_log_scopes = no }
		var:story_army = { debug_log_scopes = no }
		var:story_location = { debug_log_scopes = no }
	}
	on_end = {
	}
	on_owner_death = {
		debug_log = "dbg_log story_PoW Owner death"
		story_owner = { debug_log_scopes = no }
		if = {
			limit = { exists = var:story_army }
			make_story_owner = var:story_army.army_owner
			debug_log = "story transmitted"
			story_owner = { debug_log_scopes = no }
		}
		else = {
			debug_log = "story NOT transmitted, prisoners released"
			every_in_list = {
				variable = story_PoW_list
				if = {
					limit = { is_imprisoned = no }
					debug_log = "dbg_log liberating prisoner that's not imprisoned"
				}
				debug_log_scopes = no
				PREV = {
					remove_list_variable = {
						name = story_PoW_list
						target = PREV
					}
				}
				remove_variable = story_PoW
				release_from_prison = yes
			}
			end_story = yes
		}
	}
	effect_group = {
		days = 1
		chance = 100
		# Army has disappeard, or owner has changed
		trigger = {
			NOR = {
				exists = var:story_army
				story_owner = var:story_army.army_owner
			}
		}
		first_valid = {
			# Army has changed owner
			triggered_effect = {
				trigger = {
					exists = var:story_army
					NOT = { story_owner = var:story_army.army_owner }
				}
				# Update story owner if PoWs haven't been inherited by new owner
				effect = {
					story_owner = { debug_log_scopes = no }
					var:story_army.army_owner = { debug_log_scopes = no }
					debug_log = "dbg_log Army changed owner"
					if = {
						limit = { var:story_army.army_owner = { has_story_PoW_in_location = { LOCATION = scope:story.var:story_location }}}
						var:story_army.army_owner = {
							random_owned_story = {
								limit = { is_story_PoW_in_location = { LOCATION = scope:story.var:story_location }}
								save_temporary_scope_as = new_story
							}
						}
						scope:new_story.var:story_army = {
							debug_log = "prisoners transfered to existing story"
							debug_log_scopes = no 
						}
						PoW_transfer_to_story_same_character_effect = {
							OLD_STORY = this
							NEW_STORY = scope:new_story
						}
						end_story = yes
					}
					else = {
						debug_log = "story transfered to new owner"
						every_in_list = {
							variable = story_PoW_list
							limit = { NOT = { is_imprisoned_by = var:story_army.army_owner } }
							if = {
								limit = { is_imprisoned = no }
								debug_log = "dbg_log liberating prisoner that's not imprisoned"
							}
							debug_log_scopes = no
							PREV = {
								remove_list_variable = {
									name = story_PoW_list
									target = PREV
								}
							}
							remove_variable = story_PoW
							release_from_prison = yes
							PREV = {
								add_to_variable_list = {
									name = story_PoW_list
									target = PREV
								}
							}
							scope:new_story.story_owner = {
								imprison = {
									target = PREV
									type = prisoner_of_war
								}
							}
							set_variable = {
								name = story_PoW
								value = scope:new_story
							}
						}
						make_story_owner = var:story_army.army_owner
					}
				}
			}
			# triggered_effect = {
			# 	debug_log = "dbg_log story_PoW PoWs released"
			# 	# Army doesn't exist, and Owner doesn't exist anymore, in case of unspawning or whatever
			# 	trigger = {
			# 		NOR = {
			# 			exists = var:story_army
			# 			exists = story_owner
			# 		}
			# 	}
			# 	# TODO scripted effect Liberate PoWs
			# 	effect = {
			# 		debug_log = "dbg_log story_PoW Owner doesn't exist"
			# 		every_in_list = {
			# 			variable = story_PoW_list
			# 			release_from_prison = yes
			# 			remove_variable = story_PoW
			# 		}
			# 		end_story = yes
			# 	}
			# }
			# Army doesn't exist, owner not a war, Army has probably disbanded
			triggered_effect = {
				trigger = {
					NOT = { exists = var:story_army }
					story_owner = { is_at_war = no }
				}
				# TODO scripted effect Liberate PoWs
				effect = {
					debug_log = "dbg_log story_PoW Owner not at war"
					every_in_list = {
						variable = story_PoW_list
						if = {
							limit = { is_imprisoned = no }
							debug_log = "dbg_log changing prison type of prisoner that's not imprisoned"
							debug_log_scopes = no
						}
						change_prison_type = dungeon
						remove_variable = story_PoW
					}
					end_story = yes
				}
			}
			# Army doesn't exist, and Owner doesn't rule anymore, unallowed to have armies
			triggered_effect = {
				trigger = {
					NOT = { exists = var:story_army }
					story_owner = { is_ruler = no }
				}
				# TODO scripted effect Liberate PoWs
				effect = {
					debug_log = "dbg_log story_PoW Owner doesn't rule, prisoners liberated"
					every_in_list = {
						variable = story_PoW_list
						if = {
							limit = { is_imprisoned = no }
							debug_log = "dbg_log liberating prisoner that's not imprisoned"
							debug_log_scopes = no
						}						
						PREV = {
							remove_list_variable = {
								name = story_PoW_list
								target = PREV
							}
						}
						remove_variable = story_PoW
						release_from_prison = yes
					}
					end_story = yes
				}
			}
			# Army probably merged, as army owner has other armies in the same province
			triggered_effect = {
				trigger = {
					NOT = { exists = var:story_army }
					story_owner = { any_army = { location = scope:story.var:story_location }}
				}
				effect = {
					debug_log = "dbg_log story_PoW Armies merged"
					# Biggest army of the jailor gets picked
					debug_log_scopes = yes
					if = {
						limit = {
							story_owner = { has_story_PoW_in_location = { LOCATION = scope:story.var:story_location }}
						}
						debug_log = "dbg_log existing story_PoW selected"
						story_owner = {
							random_owned_story = {
								limit = { is_story_PoW_in_location = { LOCATION = scope:story.var:story_location }}
								save_temporary_scope_as = new_story
							}
						}
						scope:new_story.var:story_army = { debug_log_scopes = no }
					}
					else = {
						debug_log = "dbg_log new story_PoW created"
						story_owner = {
							random_army = {
								limit = { location = scope:story.var:story_location }
								save_temporary_scope_as = PoW_army
							}
							scope:PoW_army = { debug_log_scopes = no }
							set_variable = {
								name = PoW_army
								value = scope:PoW_army
							}
							var:PoW_army = { debug_log_scopes = no }
							create_story = {
								type = story_PoW
								save_temporary_scope_as = new_story
							}
							scope:PoW_army = {
								set_variable = {
									name = story_PoW
									value = scope:new_story
								}
							}
						}
					}
					scope:new_story.var:story_army = { debug_log_scopes = no  }
					PoW_transfer_to_story_same_character_effect = {
						OLD_STORY = this
						NEW_STORY = scope:new_story
					}
				}
			}
			# Army lost at sea
			triggered_effect = {
				trigger = {
					NOR = {
						exists = var:story_army
						exists = var:story_location.barony }
					}
				effect = {
					debug_log = "dbg_log story_PoW Army lost at sea"
					every_in_list = {
						variable = story_PoW_list
						death = natural # TO-DO create death_drowning
					}
					end_story = yes
				}
			}
			# Else Army lost at land/disbanded
			triggered_effect = {
				trigger = { NOT = { exists = var:story_army } }
				# TODO Liberate PoWs
				effect = {
					debug_log = "dbg_log story_PoW Army lost at land"
					story_owner = { debug_log_scopes = no }
					var:story_army = { debug_log_scopes = no }
					var:story_location = { debug_log_scopes = no }
					every_in_list = {
						variable = story_PoW_list
						if = {
							limit = { is_imprisoned = no }
							debug_log = "dbg_log liberating prisoner that's not imprisoned"
							debug_log_scopes = no
						}
						PREV = {
							remove_list_variable = {
								name = story_PoW_list
								target = PREV
							}
						}
						remove_variable = story_PoW
						release_from_prison = yes
					}
					end_story = yes
				}
			}
		}
	}
}