on_game_start_after_lobby = { on_actions = { on_game_start_PoW }}
on_game_start_PoW = {
	effect = {
		set_global_variable = {
			name = PoW_is_loaded
			value = yes
		}
	}
}

# called for armies whenever they enter a province
# root is the owner of the army
# scope:army is the army
on_army_enter_province = {
	on_actions = {
		# PoW_location_update
		PoW_commander_gather_travel_plan_update
		PoW_commander_follow_travel_plan_update
		PoW_commander_follow_travel_plan_check
		# PoW_transfer_on_action_bugfix
	}
}

PoW_commander_gather_travel_plan_update = {
	trigger = { scope:army = { exists = var:commander_gather }}
	effect = {
		scope:army.var:commander_gather = {
			add_travel_waypoint = scope:army.location
		}
	}
}

PoW_commander_follow_travel_plan_update = {
	trigger = { scope:army = { exists = var:commander_follow }}
	effect = {
		scope:army.var:commander_follow = {
			if = {
				limit = { is_paused = yes }
				resume_travel_plan = yes
			}
			add_travel_waypoint = scope:army.location
			while = {
				count = next_destination_arrival_days
				add_destination_progress = { days = 1 }
			}
		}
	}
}
	
# called for armies whenever they enter a province
# root is the owner of the army
# scope:army is the army
PoW_location_update = {
	# checks whether the army is in a story_PoW
	trigger = { scope:army = { exists = var:story_PoW } }

	# updates story_location to current army.location
	effect = {
		debug_log = "dbg_log PoW_location_update"
		debug_log_scopes = yes
		debug_log_scopes = no
		if = {
			limit = { scope:army = { exists = var:story_PoW }}
			debug_log = "var:story_PoW exists"
		}
		else = { debug_log = "var:story_PoW DOES NOT exists" }
		scope:army = { debug_log_scopes = no }
		scope:army.var:story_PoW.var:story_location = { debug_log_scopes = no }
		scope:army.location = { debug_log_scopes = no }
		scope:army.var:story_PoW = {
			debug_log_scopes = no
			set_variable = {
				name = story_location
				value = scope:army.location
			}
			every_in_list = {
				variable = story_PoW_list
				current_travel_plan ?= {
					if = {
						limit = { is_paused = yes }
						resume_travel_plan = yes
					}
					add_travel_waypoint = scope:army.location
					while = {
						count = next_destination_arrival_days
						add_destination_progress = { days = 1 }
					}
					delay_travel_plan = {
						years = 10
					}
				}
			}
		}
		scope:army.var:story_PoW.var:story_location = { debug_log_scopes = no }

		trigger_event = { on_action = PoW_dungeon_transfer_on_action_bugfix }
	}
}

# called for armies whenever they enter a province
# root is the owner of the army
# scope:army is the army
PoW_dungeon_transfer_on_action_bugfix = { on_actions = { PoW_dungeon_transfer_on_action }}
PoW_dungeon_transfer_on_action = { 
	trigger = {
		# Army has PoWs, is in friendly territory, has no enemy/hostile armies in same or neighbouring counties
		# could be simplified with a can_disband trigger
		scope:army = {
			exists = var:story_PoW
			FF_army_has_hostile_or_enemy_army_nearby = no
		}
		OR = {
			AND = {
				is_at_war = yes
				scope:army = {
					OR = {
						FF_is_in_own_territory = yes
						FF_is_in_friendly_territory = yes
					}
				}
			}
			scope:army = {
				is_raid_army = yes
				FF_is_in_own_territory = yes
			}
		}
	}
	effect = {
		debug_log = "dbg_log PoW transfer to dungeon triggered"
		debug_log_scopes = no
		# Transfer PoWs to dungeon
		# TODO handle dungeon vs house arrest depending on has_character_flag = distinguished_PoW
		scope:army.var:story_PoW = {
			every_in_list = {
				variable = story_PoW_list
				if = {
					limit = { is_imprisoned = no }
					debug_log = "dbg_log changing prison type of prisoner that's not imprisoned"
					debug_log_scopes = no
					PREV = {
						remove_list_variable = {
							name = story_PoW_list
							target = PREV
						}
					}
					remove_variable = story_PoW
				}
				else = {
					change_prison_type = dungeon
					remove_variable = story_PoW
				}
			}
			scope:army = { remove_variable = story_PoW }
			end_story = yes
		}
	}
}

# Root = Winning combat side
# scope:wipe - Was this a wipe?
on_combat_end_winner = { on_actions = { PoW_army_transfer_on_action on_combat_end_winner_debug }}

on_combat_end_winner_debug = {
	effect = {
		debug_log = "on_combat_end_winner_debug"
		debug_log_scopes = yes
		debug_log_scopes = no
		scope:wipe = { debug_log_scopes = no }
		combat.location = { debug_log_scopes = no }
		enemy_side.side_primary_participant = { debug_log_scopes = no }
	}
}

PoW_army_transfer_on_action = {
	trigger = {
		combat.location = { save_temporary_scope_as = combat_loc_temp }
		OR = {
			AND = {
				exists = combat.combat_war
				side_primary_participant = {
					any_war_enemy = {
						has_story_PoW_in_location = { LOCATION = scope:combat_loc_temp }
					}
				}
			}
			side_primary_participant = {
				OR = {
					any_hostile_raider = {
						has_story_PoW_in_location = { LOCATION = scope:combat_loc_temp }
					}
					any_raid_target = {
						OR = {
							has_story_PoW_in_location = { LOCATION = scope:combat_loc_temp }
							any_vassal_or_below = {
								has_story_PoW_in_location = { LOCATION = scope:combat_loc_temp }
							}
						}
					}
				}
			}
		}
	}

	effect = {
		debug_log = "PoW transfer to army triggered"
		combat.location = { save_scope_as = combat_loc }
		scope:combat_loc = { debug_log_scopes = no }
		enemy_side.side_primary_participant = {
			debug_log = "PoW combat loser"
			debug_log_scopes = no
			if = {
				limit = { has_story_PoW_in_location = { LOCATION = scope:combat_loc }}
				every_owned_story = {
					limit = { is_story_PoW_in_location = { LOCATION = scope:combat_loc }}
					var:story_army = { debug_log_scopes = no }
				}
			}
		}
		side_primary_participant = {
			debug_log = "PoW combat winner"
			debug_log_scopes = no
			save_scope_as = new_story_owner
			if = {
				limit = {
					has_story_PoW_in_location = { LOCATION = scope:combat_loc }
				}
				random_owned_story = {
					limit = {
						story_type = story_PoW
						var:story_location = scope:combat_loc
					}
					save_temporary_scope_as = new_story
				}
				debug_log = "PoW new army"
				scope:new_story.var:story_army = { debug_log_scopes = no }
			}
			else = {
				random_army = {
					limit = { location = scope:combat_loc }
					save_temporary_scope_as = PoW_army
				}
				set_variable = {
					name = PoW_army
					value = scope:PoW_army
				}
				create_story = {
					type = story_PoW
					save_temporary_scope_as = new_story
				}
				scope:PoW_army = {
					debug_log = "PoW new army"
					debug_log_scopes = no
					set_variable = {
						name = story_PoW
						value = scope:new_story
					}
				}
			}
		}

		if = {
			limit = {
				exists = combat.combat_war
				side_primary_participant = {
					any_war_enemy = {
						has_story_PoW_in_location = { LOCATION = scope:combat_loc }
					}
				}
			}
			side_primary_participant = {
				every_war_enemy = {
					limit = { has_story_PoW_in_location = { LOCATION = scope:combat_loc } }
					every_owned_story = {
						debug_log = "PoW defeated armies"
						var:story_army = { debug_log_scopes = no }
						limit = { is_story_PoW_in_location = { LOCATION = scope:combat_loc } }
						add_to_temporary_list = stories_to_transfer
					}
				}
			}
		}

# [PoW] To Delete
		if = {
			limit = {
				side_primary_participant = {
					any_hostile_raider = {
						has_story_PoW_in_location = { LOCATION = scope:combat_loc }
					}
				}
			}
			debug_log = "PoW hostile raider"
			side_primary_participant = {
				every_hostile_raider = {
					every_owned_story = {
						limit = { is_story_PoW_in_location = { LOCATION = scope:combat_loc } }
						add_to_temporary_list = stories_to_transfer
						var:story_army = { debug_log_scopes = no }
					}
				}
			}
		}
		if = {
			limit = {
				side_primary_participant = {
					any_raid_target = {
						OR = {
							has_story_PoW_in_location = { LOCATION = scope:combat_loc }
							any_vassal_or_below = {
								has_story_PoW_in_location = { LOCATION = scope:combat_loc }
							}
						}
					}
				}
			}
			debug_log = "PoW raid target"
			side_primary_participant = {
				every_raid_target = {
					limit = { has_story_PoW_in_location = { LOCATION = scope:combat_loc } }
					every_owned_story = {
						limit = { is_story_PoW_in_location = { LOCATION = scope:combat_loc } }
						add_to_temporary_list = stories_to_transfer
						var:story_army = { debug_log_scopes = no }
					}
				}
				every_raid_target = {
					every_vassal_or_below = {
						limit = { has_story_PoW_in_location = { LOCATION = scope:combat_loc } }
						every_owned_story = {
							limit = { is_story_PoW_in_location = { LOCATION = scope:combat_loc } }
							add_to_temporary_list = stories_to_transfer
						}
						debug_log_scopes = no
					}
				}
			}
		}
# [/PoW] /To Delete
		every_in_list = {
			list = stories_to_transfer
			var:story_army = { remove_variable = story_PoW }
			PoW_transfer_to_story_different_character_effect = {
				OLD_STORY = THIS
				NEW_STORY = scope:new_story
			}
		}
	}
}

# called for the newborn child
# scope:child is the new born character
# scope:mother is the pregnant mother
# scope:father is the family father (not the biological)
# scope:real_father is the biological father
# scope:is_bastard, true if a known bastard	
on_birth_child = { on_actions = { on_birth_prisoner_of_war }}
on_birth_prisoner_of_war = {
	trigger = {
		scope:mother = { exists = var:story_PoW }
	}
	effect = {
		set_variable = {
			name = story_PoW
			value = scope:mother.var:story_PoW
		}
		var:story_PoW = {
			add_to_variable_list = {
				name = story_PoW_list
				target = PREV
			}
		}
	}
}

# character just about to die in root scope
# if a killer is know, it's set as scope:killer
#Triggered by code
on_death = {
	on_actions = {
		on_death_prisoner_of_war
		on_death_commander
	}
}
on_death_prisoner_of_war = {
	trigger = { exists = var:story_PoW }
	effect = {
		debug_log = "PoW prisoner died in transit"
		debug_log_scopes = no
		var:story_PoW.var:story_army = { debug_log_scopes = no }
		var:story_PoW.story_owner = { debug_log_scopes = no }
		var:story_PoW = {
			remove_list_variable = {
				name = story_PoW_list
				target = PREV
			}
		}
		remove_variable = story_PoW
	}
}

on_death_commander = {
	trigger = {
		is_commanding_army = yes
		exists = current_travel_plan
	}
	effect = {
		current_travel_plan.current_location = { save_scope_as = current_location }
		commanding_army.army_owner = {
			ordered_knight = {
				limit = { is_in_army = root.commanding_army }
				order_by = martial
				save_scope_as = new_commander
			}
		}
		if = {
			limit = { exists = scope:new_commander }
			commanding_army = { assign_commander = scope:new_commander }
			scope:new_commander = {
				set_location = scope:current_location
				liege_or_court_owner.capital_province = { save_scope_as = home }
				start_travel_plan = { 
					destination = scope:home
					players_use_planner = no
					return_trip = no
					# on_arrival_destinations = all
					# on_arrival_on_action = PoW_commander_travel_plan_delay_check
				}
				current_travel_plan = {
					set_variable = {
						name = army_follow
						value = scope:army
					}
					save_scope_as = new_travel_plan
					save_scope_value_as = {
						name = delay
						value = flag:debug
					}
					scope:delay = {
						trigger_event = {
							on_action = PoW_commander_travel_plan_delay
						}
					}
				}
				scope:army = {
					set_variable = {
						name = commander_follow
						value = scope:travel_plan
					}
				}
			}
			current_travel_plan = {
				every_entourage_character = {
					scope:new_travel_plan = { add_companion = prev }
				}
			}
		}
		else = {
			current_travel_plan = {
				every_entourage_character = {
					limit = { is_imprisoned = yes }
					add_to_list = released_prisoners
					if = {
						limit = { is_landed = yes }
						capital_province = { add_to_list = destinations }
					}
					else = { liege_or_court_owner.capital_province = { add_to_list = destinations }}
					release_from_prison = yes
					set_location = scope:current_location
				}
			}
			every_in_list = {
				list = destinations
				save_scope_as = destination
				ordered_in_list = {
					list = released_prisoners
					limit = {
						OR = {
							capital_province ?= prev
							liege_or_court_owner.capital_province ?= prev
						}
					}
					order_by = {
						value = 1
						add = highest_held_title_tier
						multiply = 10
						if = {
							limit = { is_adult = no }
							multiply = 0
						}
					}
					start_travel_plan = { 
						destination = scope:destination
						players_use_planner = no
						return_trip = no
					}
					current_travel_plan = { save_scope_as = new_travel_plan }
					every_in_list = {
						list = released_prisoners
						limit = {
							NOT = { this = prev }
							OR = {
								capital_province ?= prev
								liege_or_court_owner.capital_province ?= prev
							}
						}
						scope:new_travel_plan = { add_companion = prev }
					}
				}
			}
		}
	}
}

# Called when a raid army is defeated in battle and gets its loot (if any) stolen
# Use root.raid_loot to see how they're carrying
# root is the raid army
# scope:raider is the person owning the raid army
# scope:receiver is the person getting the raid loot
on_defeat_raid_army = { on_actions = { on_defeat_raid_army_PoW }}
on_defeat_raid_army_PoW = {
	effect = {
		debug_log = "dbg_log on_defeat_raid_army_PoW"
		debug_log_scopes = yes
	# trigger = { exists = var:story_PoW }
	# effect = {
	# 	debug_log = "PoW raid army defeated"
	# 	scope:raider = { debug_log_scopes = no }
	# 	debug_log_scopes = no
	# 	debug_log = "PoW who defeated the raid army ?"
	# 	scope:receiver = { debug_log_scopes = no }
	# 	location = { save_temporary_scope_as = combat_loc }
	# 	if = {
	# 		limit = { scope:receiver = { has_story_PoW_in_location = { LOCATION = scope:combat_loc }}}
	# 		scope:receiver = {
	# 			random_owned_story = {
	# 				limit = { is_story_PoW_in_location = { LOCATION = scope:combat_loc }}
	# 				save_temporary_scope_as = new_story
	# 			}
	# 			scope:new_story.var:story_army = { debug_log_scopes = no }
	# 		}
	# 	}
	# 	else = {
	# 		scope:receiver = {
	# 			random_army = {
	# 				limit = { location = scope:combat_loc }
	# 				save_temporary_scope_as = PoW_army
	# 			}
	# 			set_variable = {
	# 				name = PoW_army
	# 				value = scope:PoW_army
	# 			}
	# 			create_story = {
	# 				type = story_PoW
	# 				save_temporary_scope_as = new_story
	# 			}
	# 			scope:PoW_army = {
	# 				debug_log_scopes = no
	# 				set_variable = {
	# 					name = story_PoW
	# 					value = scope:new_story
	# 				}
	# 			}
	# 		}
	# 	}
	# 	PoW_transfer_to_story_different_character_effect = {
	# 		OLD_STORY = var:story_PoW
	# 		NEW_STORY = scope:new_story
	# 	}
	# }
	}
}

on_war_won_attacker = { on_actions = { on_war_won_PoW }}
on_war_won_defender = { on_actions = { on_war_won_PoW }}
on_war_white_peace = { on_actions = { on_war_won_PoW }}
on_war_invalidated = { on_actions = { on_war_won_PoW }}

on_war_won_PoW = {
	trigger = {
		war = { any_war_participant = { owns_story_of_type = story_PoW }}
	}
	effect = {
		debug_log = "PoW war over"
		war = { debug_log_scopes = no }
		debug_log_scopes = yes
	}
	events = { PoW_event.0001 }
}

escape_from_prison_success = { on_actions = { escape_from_prison_success_PoW }}
escape_from_prison_success_PoW = {
	trigger = { exists = var:story_PoW }
	effect = {
		var:story_PoW = {
			remove_list_variable = {
				name = story_PoW_list
				target = PREV
			}
		}
		remove_variable = story_PoW
	}
}

on_release_from_prison = { on_actions = on_release_from_prison_PoW }}
on_release_from_prison_PoW = {
	trigger = {
		exists = var:story_PoW
		var:story_PoW = {
			is_target_in_variable_list = {
				name = story_PoW_list
				target = PREV
			}
		}
	}
	effect = {
		debug_log = "dbg_log realeased from prison, still in story_PoW"
		debug_log_scopes = no
		scope:imprisoner = { debug_log_scopes = no }
		var:story_PoW = {
			remove_list_variable = {
				name = story_PoW_list
				target = PREV
			}
		}
		remove_variable = story_PoW
	}
}

on_commander_travel_to_army = {
	trigger = { current_travel_plan.current_location = current_travel_plan.var:army.location }
	effect = {
		current_travel_plan.var:army = { save_scope_as = army }
		current_travel_plan = { abort_travel_plan = yes }
		scope:army = {
			assign_commander = prev
			remove_variable = commander_gather
		}
		if = {
			limit = { is_ruler = yes }
			capital_province = { save_scope_as = home }
		}
		else = {
			court_owner.capital_province = { save_scope_as = home }
		}
		start_travel_plan = { 
			destination = scope:home
			travel_leader = this
			players_use_planner = no
			return_trip = no
			# on_arrival_destinations = all
			# on_arrival_on_action = PoW_commander_travel_plan_delay_check
		}
		current_travel_plan = {
			set_variable = {
				name = army_follow
				value = scope:army
			}
			save_scope_as = travel_plan
			save_scope_value_as = {
				name = delay
				value = flag:debug
			}
			scope:delay = {
				trigger_event = {
					on_action = PoW_commander_travel_plan_delay
				}
			}
		}
		scope:army = {
			set_variable = {
				name = commander_follow
				value = scope:travel_plan
			}
		}
	}
}

PoW_commander_travel_plan_delay = {
	trigger = {
		exists = scope:travel_plan
		exists = scope:travel_plan.var:army_follow
		scope:travel_plan.travel_plan_owner = { is_commanding_army = yes }
	}
	effect = {
		debug_log = "PoW_commander_travel_plan_delay"
		debug_log_scopes = no
		scope:travel_plan = {
			delay_travel_plan = {
				days = 6
				add = no
			}
		}
	}
	on_actions = {
		delay = { days = 5 }
		PoW_commander_travel_plan_delay
	}
}

PoW_commander_follow_travel_plan_check = {
	trigger = {
		exists = scope:army.army_commander
		NOT = { exists = scope:army.army_commander.current_travel_plan }
	}
	effect = {
		if = {
			limit = { debug_only = yes }
			debug_log = "PoW_commander_follow_travel_plan_check"
			debug_log_scopes = no
		}
		scope:army.army_commander = {
			if = {
				limit = { debug_only = yes }
				debug_log_scopes = no
			}
			if = {
				limit = { is_ruler = yes }
				capital_province = { save_scope_as = home }
			}
			else = {
				court_owner.capital_province = { save_scope_as = home }
			}
			start_travel_plan = { 
				destination = scope:home
				travel_leader = this
				players_use_planner = no
				return_trip = no
				# on_arrival_destinations = all
				# on_arrival_on_action = PoW_commander_travel_plan_delay_check
			}
			current_travel_plan = {
				set_variable = {
					name = army_follow
					value = scope:army
				}
				save_scope_as = travel_plan
				save_scope_value_as = {
					name = delay
					value = flag:debug
				}
				scope:delay = {
					trigger_event = {
						on_action = PoW_commander_travel_plan_delay
					}
				}
			}
			scope:army = {
				set_variable = {
					name = commander_follow
					value = scope:travel_plan
				}
			}
		}
	}
}

test_travel_plan = {
	trigger = {

	}
	effect = {
		debug_log = "test_travel_plan"
		debug_log_scopes = no
		current_location.county = {
			debug_log_scopes = no
			random_neighboring_county = {
				title_province = {
					save_scope_as = waypoint
				}
			}
		}
		scope:waypoint ?= { debug_log_scopes = no }
		add_travel_waypoint = scope:waypoint
		while = {
			count = next_destination_arrival_days
			add_destination_progress = { days = 1 }
		}
		pause_travel_plan = yes
	}
	on_actions = { test_travel_plan }
}

on_travel_plan_abort = {
	on_actions = {
		debug_on_travel_plan_abort
	}
}

on_travel_plan_cancel = {
	on_actions = {
		debug_on_travel_plan_cancel
	}
}

debug_on_travel_plan_abort = {
	effect = {
		debug_log = "on_travel_plan_abort"
		debug_log_scopes = yes
	}
}