# Supported scopes : none
PoW_transfer_to_story_different_character_effect = {
	$OLD_STORY$ = { save_temporary_scope_as = old_story }
	$NEW_STORY$ = { save_temporary_scope_as = new_story }

	scope:old_story = {
		if = {
			limit = { exists = var:story_army }
			var:story_army = { remove_variable = story_PoW }
		}
		every_in_list = {
			variable = story_PoW_list
			if = {
				limit = { NOT = { is_imprisoned_by = scope:new_story.story_owner } }
				if = {
					limit = { is_imprisoned = no }
					debug_log = "dbg_log liberating prisoner that's not imprisoned"
					PREV = {
						remove_list_variable = {
							name = story_PoW_list
							target = PREV
						}
					}
					remove_variable = story_PoW
				}
				else = {
					debug_log_scopes = no
					PREV = {
						remove_list_variable = {
							name = story_PoW_list
							target = PREV
						}
					}
					release_from_prison = yes
					remove_variable = story_PoW
					if = {
						limit = {
							NOR = {
								THIS = scope:new_story.story_owner
								is_allied_in_war = scope:new_story.story_owner
								is_allied_to = scope:new_story.story_owner
								is_vassal_of = scope:new_story.story_owner
								is_courtier_of = scope:new_story.story_owner
								is_close_or_extended_family_of = scope:new_story.story_owner
							}
						}
						scope:new_story.story_owner = {
							imprison = {
								target = PREV
								type = prisoner_of_war
							}
						}
						scope:new_story = {
							add_to_variable_list = {
								name = story_PoW_list
								target = PREV
							}
						}
						set_variable = {
							name = story_PoW
							value = scope:new_story
						}
					}
				}
			}
		}
		end_story = yes
	}
}

PoW_transfer_to_story_same_character_effect = {
	$OLD_STORY$ = { save_temporary_scope_as = old_story }
	$NEW_STORY$ = { save_temporary_scope_as = new_story }

	scope:old_story = {
		if = {
			limit = { exists = var:story_army }
			var:story_army = { remove_variable = story_PoW }
		}
		every_in_list = {
			variable = story_PoW_list
			debug_log_scopes = no
			if = {
				limit = { is_imprisoned = no }
				debug_log = "dbg_log transfering prisoner that's not imprisoned"
			}
			remove_variable = story_PoW
			scope:new_story = {
				add_to_variable_list = {
					name = story_PoW_list
					target = PREV
				}
			}
			set_variable = {
				name = story_PoW
				value = scope:new_story
			}
		}
		end_story = yes
	}
}

# A lite version of imprison_character_effect without opinion penalties or other consequences (as they were captured in war, not at your command)
# [PoW]
# scope:PoW_army needed
PoW_capture_effect = {
	$TARGET$ = { save_temporary_scope_as = PoW_target }
	$IMPRISONER$ = { save_temporary_scope_as = PoW_imprisoner }
	$LOCATION$ = { save_temporary_scope_as = PoW_battle_loc }
	debug_log = "dbg_log PoW_capture_effect"
	scope:PoW_imprisoner = { debug_log_scopes = no }
	scope:PoW_target = { debug_log_scopes = no }
	scope:PoW_battle_loc = { debug_log_scopes = no }

	scope:PoW_imprisoner = {
		imprison = {
			target = scope:PoW_target
			type = prisoner_of_war
		}
		if = {
			limit = {
				any_owned_story = {
					story_type = story_PoW
					var:story_location = scope:PoW_battle_loc
				}
			}
			debug_log = "dbg_log merge story_PoW"
			ordered_owned_story = {
				limit = {
					story_type = story_PoW
					var:story_location = scope:PoW_battle_loc
				}
				order_by = var:story_army.army_size
				add_to_variable_list = {
					name = story_PoW_list
					target = scope:PoW_target
				}
				save_temporary_scope_as = story_PoW
			}
		}
		else = {
			debug_log = "dbg_log create story_PoW"
			scope:PoW_army = { debug_log_scopes = no }
			set_variable = {
				name = PoW_army
				value = scope:PoW_army
			}
			create_story = {
				type = story_PoW
				save_temporary_scope_as = story_PoW
			}
			scope:story_PoW = {
				add_to_variable_list = {
					name = story_PoW_list
					target = scope:PoW_target
				}
				var:story_army = {
					set_variable = {
						name = story_PoW
						value = scope:story_PoW
					}
				}
			}
		}
		scope:PoW_target = {
			set_variable = {
				name = story_PoW
				value = scope:story_PoW
			}
		}
	}

	if = {
		limit = {
			scope:PoW_target = {
				exists = liege
				OR = {
					is_landed = yes
					is_close_or_extended_family_of = liege
					is_spouse_of = liege
				}
			}
		}
		add_character_flag = distinguished_PoW
	}
}
# [/PoW]
