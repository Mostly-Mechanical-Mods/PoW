types PoWReplace {
	type widget_character_list_item = widget {
		datacontext = "[CharacterListItem.GetCharacter]"
		size = { 10 110 }

		block "divider" {
			divider = {
				parentanchor = bottom|hcenter
				size = { 100% 3 }
			}
		}

		block "widget" {}

		hbox = {
			margin = { 0 5 }
			spacing = 15

			portrait_head_small = {}

			button_standard = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				onclick = "[CharacterListItem.OnClick('character')]"
				enabled = "[CharacterListItem.IsSelectable]"
				tooltip = "[CharacterListItem.GetUnselectableReason]"

				framesize = { 252 80 }
				spriteType = Corneredtiled
				spriteborder = { 10 30 }
				texture = "gfx/interface/buttons/button_entry_characterlist.dds"

				block "button" {}

				character_list_arrow = {
					name = "character_list_arrow"
				}

				block "overlay" {
					using = default_character_list_overlay
				}

				block "button_content"
				{
					hbox = {
						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							# Name and age
							vbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								margin_left = 10

								text_single = {
									layoutpolicy_horizontal = expanding
									using = Font_Size_Medium
									autoresize = no
									alwaystransparent = yes

									text = "[Character.GetUINameNoTooltip]"
								}

								hbox = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding

									using = character_age_or_death_text
									blockoverride "list_layout" {}

									block "character_relation"
									{
										text_single = {
											name = "character_relation"
											layoutpolicy_horizontal = expanding
											raw_text = "|  [Character.GetRelationToString( GetPlayer )]"
											tooltip = "EXTENDED_RELATIONS_TOOLTIP"
											default_format = "#low"
											autoresize = no
											align = nobaseline
											visible = "[Character.HasRelationTo( GetPlayer )]"
											alwaystransparent = yes
										}

										expand = {
											visible = "[Not(Character.HasRelationTo( GetPlayer ))]"
										}
									}
								}
								block "character_description_extra" {}
							}

							# Dynasty
							hbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								margin_left = 5

								widget = {
									size = { 45 60 }

									coa_house_small = {
										datacontext = "[Character.GetHouse]"
										scale = 0.7
									}
								}

								# Traits

								fixedgridbox = {
									name = "traits_grid"
									datamodel = "[CharacterListItem.GetTraits]"
									flipdirection = yes
									size = { 150 60 }
									addcolumn = 30
									addrow = 45
									maxhorizontalslots = 8
									maxverticalslots = 1

									item = {
										container = {
											visible = "[Trait.IsValid]"

											icon_trait = {
												blockoverride "icon_size"
												{
													size = { 30 30 }
												}

												blockoverride "tooltip_placement"
												{
													using = tooltip_se
												}

												blockoverride "glow_radius"
												{
													glow_radius = 3
												}
											}
										}
									}
								}

								block "bottom_middle_box" {
									expand  = {}
								}

							}
						}

						expand = {}

						vbox = {
							minimumsize = { 200 0 }
							datacontext = "[CharacterListItem.GetCharacter]"
							layoutpolicy_vertical = expanding
							margin_top = 5
							margin_right = 5

							# Skills
							hbox = {
								name = "skills_grid"
								layoutpolicy_horizontal = expanding

								expand = {}

								datamodel = "[CharacterListItem.GetSkillItems]"
								margin_right = 5

								item = {
									widget_skill_item_no_icon = {}
								}
							}

							block "extra_skills" {}

							expand = {}

							block "bottom_right_box"
							{
								hbox = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding

									# Realm
									widget = {
										size = {55 58 }
										visible = "[Not( IsDataModelEmpty( CharacterListItem.GetTitleItems ) )]"

										block "claims_visibility" {}

										datacontext = "[CharacterListItem.GetFirstClaim]"

										coa_title_tiny_crown = {
											using = tooltip_ne
											datacontext = "[Claim.GetTitle]"

											highlight_icon = {
												name = "pressed_claim"
												visible = "[And(Claim.IsPressed, Not(Claim.IsImplicit))]"
												texture = "gfx/interface/icons/title_status/icon_claim_pressed.dds"
												size = { 24 24 }
												parentanchor = bottom|right
											}

											highlight_icon = {
												name = "unpressed_claim"
												visible = "[And(Not(Claim.IsPressed), Not(Claim.IsImplicit))]"
												texture = "gfx/interface/icons/title_status/icon_claim_unpressed.dds"
												size = { 24 24 }
												parentanchor = bottom|right
											}

											highlight_icon = {
												name = "implicit_claim"
												visible = "[Claim.IsImplicit]"
												texture = "gfx/interface/icons/title_status/icon_claim_implicit.dds"
												size = { 24 24 }
												parentanchor = bottom|right
											}

											blockoverride "coa_tooltip"
											{
												tooltip = "CHARACTER_LIST_CLAIM_TOOLTIP"
											}
										}

										text_single = {
											align = right
											minimumsize = { 15 0 }
											parentanchor = vcenter|right
											text = "[CharacterListItem.GetTitleItemCount]"
											tooltip = "CHARACTER_LIST_CLAIM_TOOLTIP"
										}
									}

									expand = {}

									# Religion
									vbox = {
										layoutpolicy_vertical = expanding

										margin_bottom = 20
										
										expand = {}

										hbox = {
											icon = {
												name = "faith_button"
												size = { 35 35 }
												datacontext = "[Character.GetFaith]"
												tooltipwidget = { faith_tooltip = {} }
												texture = "[Faith.GetIcon]"
											}

											widget = {
												datacontext = "[Character.GetCulture]"
												size = { 120 24 }

												tooltipwidget = {
													culture_tooltip = {}
												}
												using = tooltip_se

												hbox = {
													spacing = 3

													icon = {
														name = "culture"
														texture = "gfx/interface/icons/icon_culture.dds"
														size = { 24 24 }
													}

													text_multi = {
														layoutpolicy_horizontal = expanding
														min_width = 95
														max_width = 95
														autoresize = yes
														text = "CULTURE_LISTS_WINDOW"
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

types PoW {

	type PoW_in_army_tooltip = widget
	{
		size = { 400 200 }
		using = Background_Tooltip
		alwaystransparent = no
		vbox = {
			# margin_top = 5
			scrollbox = {
				size = { 380 180 }
				scrollwidget = {
					dynamicgridbox = {
						datamodel = "[Army.GetCommander.MakeScope.GetList('PoW')]"
						item = {
							flowcontainer = {
								datacontext = "[Scope.GetCharacter]"
								hbox = {
									portrait_head_small = {}
									spacer = { size = { 5 0 }}
									vbox = {
										hbox = {
											layoutpolicy_horizontal = expanding
											text_single = {
												text = "[Character.GetName]"
											}
											expand = {}
										}
										hbox = {
											layoutpolicy_horizontal = expanding
											text_single = {
												visible = "[And(Character.GetLiege.IsValid,Not(Character.IsRuler))]"
												text = "POW_CAPTURED_FROM"
											}
											expand = {}
										}
										hbox = {
											layoutpolicy_horizontal = expanding
											text_single = {
												name = "imprisoned_time"
												layoutpolicy_horizontal = expanding
												text = "CAPTURED_FOR"
												autoresize = no
											}
											expand = {}
										}
										
									}
								}
							}
						}
					}
				}
			}
		}
	}

	type PoW_in_army = hbox
	{
		name = "PoW"
		visible = "[GreaterThan_int32(GetDataModelSize(Army.GetCommander.MakeScope.GetList('Pow')),'(int32)0')]"
		icon = {
			name = "PoW_icon"
			texture = "gfx/interface/icons/portraits/punishment.dds"
			size = { 35 35 }
		}
		text_single = {
			name = "PoW_list_size"
			text = "[GetDataModelSize(Army.GetCommander.MakeScope.GetList('Pow'))|#V]"
		}
		tooltipwidget = { PoW_in_army_tooltip = {} }
		using = tooltip_ne
	}

	type PoW_in_unit_icon = widget
	{
		visible = "[GreaterThan_int32(GetDataModelSize(UnitItem.GetArmy.GetCommander.MakeScope.GetList('PoW')),'(int32)0')]"
		size = { 20 20 }

		icon = {
			name = "PoW"
			texture = "gfx/interface/icons/portraits/punishment.dds"
			size = { 20 20 }
			position = { 0 5 }
		}
	}

	type PoW_in_unit_tooltip = widget
	{
		size = { 400 200 }
		using = Background_Tooltip
		alwaystransparent = no
		vbox = {
			# margin_top = 5
			scrollbox = {
				size = { 380 180 }
				scrollwidget = {
					dynamicgridbox = {
						datamodel = "[UnitItem.GetArmy.GetCommander.MakeScope.GetList('PoW')]"
						item = {
							flowcontainer = {
								datacontext = "[Scope.GetCharacter]"
								hbox = {
									portrait_head_small = {}
									spacer = { size = { 5 0 }}
									vbox = {
										hbox = {
											layoutpolicy_horizontal = expanding
											text_single = {
												text = "[Character.GetName]"
											}
											expand = {}
										}
										hbox = {
											layoutpolicy_horizontal = expanding
											text_single = {
												visible = "[And(Character.GetLiege.IsValid,Not(Character.IsRuler))]"
												text = "POW_CAPTURED_FROM"
											}
											expand = {}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	type PoW_in_unit_text = vbox
	{
		layoutpolicy_horizontal = expanding
		spacing = 4
		hbox = {
			layoutpolicy_horizontal = expanding
			visible = "[GreaterThan_int32(GetDataModelSize(UnitItem.GetArmy.GetCommander.MakeScope.GetList('PoW')),'(int32)0')]"
			tooltipwidget = { PoW_in_unit_tooltip = {} }
			margin_left = 4

			icon = {
				name = "PoW"
				texture = "gfx/interface/icons/portraits/punishment.dds"
				size = { 24 24 }
			}
			text_single = {
				layoutpolicy_horizontal = expanding
				name = "attrition"
				text = "POW_NB_IN_UNIT"
				align = nobaseline
			}
		}	
	}

	type UniUI_PoW_in_prison = vbox {
		visible = "[GetGlobalVariable('PoW_is_loaded').IsSet]"
		name = "PoW_info_text_not_PoW"
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding

		text_single = {
			visible = "[GetScriptedGui('prison_screen_exclude_PoW').IsShown(GuiScope.SetRoot( Character.MakeScope ).End)]"
			name = "PoW_prisoner"
			layoutpolicy_horizontal = expanding
			text = "[CharacterListItem.GetText('tooltip')]"
			default_format = "#low"
			autoresize = yes
		}

		# [PoW]
		text_single = {
			visible = "[GetScriptedGui('prison_screen_PoW').IsShown(GuiScope.SetRoot( Character.MakeScope ).End)]"
			name = "PoW_imprisoner"
			layoutpolicy_horizontal = expanding
			text = "POW_CAPTUREDBY_SHORT"
			# default_format = "#low"
			autoresize = yes
		}
		# [/PoW]

		text_single = {
			visible = "[GetScriptedGui('prison_screen_PoW').IsShown(GuiScope.SetRoot( Character.MakeScope ).End)]"
			name = "PoW_location"
			layoutpolicy_horizontal = expanding
			text = "POW_LOCATION"
			# default_format = "#low"
			autoresize = yes
		}

		text_single = {
			name = "imprisoned_time"
			layoutpolicy_horizontal = expanding
			text = "[CharacterListItem.GetText('imprisoned_time')]"
			autoresize = no
		}												
		expand = {}
	}

	type UniUI_PoW_prison_text = vbox {
		vbox = {
			layoutpolicy_horizontal = expanding
			margin = { 5 5 }
			# [UniUI] [PoW]
			visible = "[Not(GetScriptedGui('prison_screen_PoW').IsShown(GuiScope.SetRoot( Character.MakeScope ).End))]"
			# [/PoW] [/UniUI]

			background = {
				using = Background_Area
				margin_bottom = 3
			}

			text_single = {
				text = "[Character.GetShortUINameNoTooltip]"
				default_format = "#high"
				using = Font_Size_Medium
			}

			text_single = {
				visible = "[Character.IsImprisoned]"
				name = "type"
				text = "[CharacterListItem.GetText('tooltip')]"
			}
		}
		vbox = {
			layoutpolicy_horizontal = expanding
			margin = { 5 5 }
			visible = "[GetScriptedGui('prison_screen_PoW').IsShown(GuiScope.SetRoot( Character.MakeScope ).End)]"
			# [/PoW]

			background = {
				using = Background_Area
				margin_bottom = 3
			}

			text_single = {
				text = "[Character.GetShortUINameNoTooltip]"
				default_format = "#high"
				using = Font_Size_Medium
			}

			text_single = {
				visible = "[Character.IsImprisoned]"
				name = "type"
				text = "POW_CAPTUREDBY"
			}
		}
	}

	type error_horse = container {
		name = "debug_info_horse"
		using = Animation_ShowHide_Quick

		button = {
			name = "error_button"
			visible = "[HasErrors]"
			position = { 0 2 }

			using = Animation_ShowHide_Standard

			tooltip = "[ErrorTooltip]"
			onclick = "[OpenErrorLog]"
			onrightclick = "[ClearErrorLog]"
			button_ignore = none
			oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
			clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_select"

			texture = "gfx/interface/_debug/errorhoof.dds"
			framesize = { 112 112 }
			size = { 80 80 }
			frame = "[GetErrorHoofFrame]"

			state = {
				name = _show
				start_sound = {
					soundeffect = "event:/Error/Errorhof"
				}
			}
		}

		flowcontainer = {
			position = { 100 5 }
			direction = vertical
			ignoreinvisible = yes
			spacing = 5

			## Error count
			text_single = {
				name = "error_text_nice"
				visible = "[And(HasErrors,EqualTo_int32(NumberOrErrors,'(int32)69'))]"

				raw_text = "Errors: Nice"
				max_width = 300

				using = Animation_ShowHide_Standard

				background = {
					using = Text_Label_Background
					shaderfile = "gfx/FX/pdxgui_default.shader"
					margin = { 17 3 }
				}
			}

			text_single = {
				name = "error_text"
				visible = "[And(HasErrors,Not(EqualTo_int32(NumberOrErrors,'(int32)69')))]"

				raw_text = "Errors: [NumberOrErrors]"
				max_width = 300

				using = Animation_ShowHide_Standard

				background = {
					using = Text_Label_Background
					shaderfile = "gfx/FX/pdxgui_default.shader"
					margin = { 17 3 }
				}
			}

			## Current FPS
			text_single = {
				name = "debug_current_fps"
				visible = "[And( InDebugMode, GreaterThanOrEqualTo_float( GetCurrentFps, '(float)30' ) )]"

				raw_text = "FPS: [GetCurrentFps|0]"
				max_width = 300

				background = {
					using = Text_Label_Background
					margin = { 17 3 }
				}
			}

			## Low FPS Warning
			text_single = {
				name = "low_fps_warning"
				visible = "[LessThan_float( GetCurrentFps, '(float)30' )]"

				raw_text = "@warning_icon! Low FPS: [GetCurrentFps|0]"
				raw_tooltip = "Current FPS is under 30!"
				default_format = "#X"

				max_width = 300

				background = {
					using = Text_Label_Background
					margin = { 17 3 }
				}
			}
		}
	}

}

template UniUI_PoW_army_disband {
	datacontext = "[GetScriptedGui('PoW_army_disband')]"
	onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Army.MakeScope ).End)]"
}

template PoW_background {
	background = {
		visible = "[GetScriptedGui('prison_screen_exclude_PoW').IsShown(GuiScope.SetRoot( CharacterListItem.GetCharacter.MakeScope ).End)]"
		texture = "gfx/interface/skinned/illustrations/dungeon.dds"
		margin = { -5 0 }
		fittype = centercrop
		alpha = 0.3

		using = Mask_Rough_Edges
	}

	background = {
		visible = "[GetScriptedGui('prison_screen_PoW').IsShown(GuiScope.SetRoot( CharacterListItem.GetCharacter.MakeScope ).End)]"
		# texture = "gfx/interface/illustrations/army_status/camped.dds"
		texture = "[Character.MakeScope.Var('story_PoW').Var('story_army').Army.GetArmyStatusIllustration]"
		margin = { -5 0 }
		fittype = centercrop
		alpha = 0.3

		using = Mask_Rough_Edges
	}
}

template UniUI_PoW_mass_action_lock {
	down = "[GetScriptedGui('prison_screen_PoW').IsShown(GuiScope.SetRoot( Character.MakeScope ).End)]"
}

template UniUI_PoW_mass_action_visibility_trigger {
	visible = "[Not(GetScriptedGui('prison_screen_PoW').IsShown(GuiScope.SetRoot( Character.MakeScope ).End))]"
}

template UniUI_PoW_prison_background {
	background = {
		visible = "[GetScriptedGui('prison_screen_exclude_PoW').IsShown(GuiScope.SetRoot( Character.MakeScope ).AddScope( 'player', GetPlayer.MakeScope ).End)]"
		texture = "gfx/interface/skinned/illustrations/dungeon.dds"
		margin = { -5 0 }
		fittype = centercrop
		alpha = 0.3

		using = Mask_Rough_Edges
	}

	background = {
		visible = "[GetScriptedGui('prison_screen_PoW').IsShown(GuiScope.SetRoot( Character.MakeScope ).AddScope( 'player', GetPlayer.MakeScope ).End)]"
		# texture = "gfx/interface/illustrations/army_status/camped.dds"
		texture = "[Character.MakeScope.Var('story_PoW').Var('story_army').Army.GetArmyStatusIllustration]"
		margin = { -5 0 }
		fittype = centercrop
		alpha = 0.3

		using = Mask_Rough_Edges
	}
}